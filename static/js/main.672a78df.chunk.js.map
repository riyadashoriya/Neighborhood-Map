{"version":3,"sources":["components/PlaceCard.js","components/MapComponent.js","components/SearchComponent.js","App.js","serviceWorker.js","index.js"],"names":["PlaceCard","place","this","props","react_default","a","createElement","name","location","address","city","state","postalCode","country","Component","MapComponent","compose","withProps","googleMapURL","loadingElement","style","height","containerElement","id","mapElement","withScriptjs","withGoogleMap","lib","defaultZoom","center","isMarkerVisible","Object","keys","markers","map","key","index","position","onClick","onMarkerClick","bind","selectedPlace","components_PlaceCard","SearchComponent","_this$props","updateSearch","queriedPlaces","placeClick","BurgerMenu","type","placeholder","onChange","event","target","value","title","App","places","lat","lng","modalIsOpen","handleMarkerClick","_this","filter","setState","self","loadPlaces","then","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","response","venues","Symbol","iterator","next","done","venue","parseFloat","err","return","catch","fetch","json","Promise","resolve","query","trim","qp","toUpperCase","startsWith","window","reload","_this2","className","components_SearchComponent","components_MapComponent","react_modal_lib_default","isOpen","ariaHideApp","closeModal","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.672a78df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass PlaceCard extends Component {\n\n  static propTypes = {\n\t\tplace: PropTypes.object.isRequired,\n\t}\n\n  render () {\n  \tlet {place} = this.props;\n    return (\n      <div>\n        <h4>{ place.name }</h4>\n        <p>\n          { place.location.address }<br/>\n          { place.location.city }, { place.location.state } - { place.location.postalCode }<br/>\n          { place.location.country }<br/>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default PlaceCard;","import React from 'react';\nimport { compose, withProps } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport PlaceCard from './PlaceCard';\n\nconst MapComponent = compose(\n  withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCY7kS1SoHmWDew9tTrpuyj0s19fO2g4OY&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div id=\"containerElement\" />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap\n)((props) =>\n  <GoogleMap\n    defaultZoom={15}\n    center= { props.center } >\n\n    {\n    \t/* Show all the markers on the map */\n    \tprops.isMarkerVisible && \n    \tObject.keys(props.markers).map(function(key, index) {\n\t\t\t\treturn (\n\t\t\t\t<Marker key={key} position= {props.markers[key]} onClick={props.onMarkerClick.bind(this,key)}>\n\n\t\t\t\t{ /* Show info if the place is selected */\n\t\t\t\t\tprops.selectedPlace && (props.selectedPlace[0].id === key) &&\n\t\t\t\t  <InfoWindow position={props.selectedPlace.location}>\n\t\t\t\t    <PlaceCard place = {props.selectedPlace[0]} />\n\t\t\t\t  </InfoWindow>\n\t\t\t\t}\n\n\t\t\t\t</Marker>\t)\n\t\t\t})\n\t\t}\n\n  </GoogleMap>\n)\n\nexport default MapComponent;","import React, { Component } from 'react';\nimport { slide as Menu } from 'react-burger-menu'\nimport PropTypes from 'prop-types';\nimport PlaceCard from './PlaceCard';\n\nclass SearchComponent extends Component {\n\n  static propTypes = {\n\t\tqueriedPlaces: PropTypes.array.isRequired,\n\t\tupdateSearch: PropTypes.func.isRequired,\n\t}\n\n  render () {\n  \tlet {updateSearch, queriedPlaces, placeClick} = this.props;\n\n    return (\n      <Menu>\n       <input type=\"text\" id=\"search-input\" placeholder=\"type a salon name\" onChange={(event) => updateSearch(event.target.value)}/>\n       <ul id=\"places-list\">\n          {\n            queriedPlaces.map(function(place) {\n              return (\n                <li title={ place.name } key={ place.id } onClick={ placeClick.bind(this, place.id) }>\n                  <PlaceCard place={place} />\n                </li>\n              )\n            })\n          }\n        </ul>\n      </Menu>\n    );\n  }\n}\n\nexport default SearchComponent","import React, { Component } from 'react';\nimport './App.css';\nimport MapComponent from './components/MapComponent';\nimport SearchComponent from './components/SearchComponent';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\n\nclass App extends Component {\n  state = {\n    isMarkerVisible: false,\n    places: null, //List of all the places returned by foursquare api\n    markers: null, //List of all the markers. Each record contains id, lat and lng of the location\n    queriedPlaces: [], //List of all the places, which matches search field\n    center: { //Default center of the map\n      lat: 40.760981254004264,\n      lng: -111.89117340652818\n    },\n    selectedPlace: null, //Location selected using marker or the list\n    modalIsOpen: false // Modal window to show when there is problem loading the data.\n  }\n\n  // Called when component is mounted. Fetch the list of places and set up markers in the map.\n  componentDidMount() {\n    let self = this;\n\n    // Get the list of places\n    self.loadPlaces()\n    .then(function(data){\n\n      let markers = {};\n      for (let venue of data.response.venues) {\n        markers[venue.id] = {\"id\": venue.id, \"lat\": parseFloat(venue.location.lat), \"lng\": parseFloat(venue.location.lng)};\n      }\n\n      self.setState({ places: data.response.venues, markers: markers, queriedPlaces: data.response.venues, isMarkerVisible: true });\n    }).catch(() => {\n      self.setState({modalIsOpen: true});\n    })\n  }\n\n  // Called initially to fetch all the `salon` in `salt lake city`. Uses foursquare api\n  loadPlaces() {\n    let city = 'Salt lake city';\n    let query = 'salon';\n    var apiURL = 'https://api.foursquare.com/v2/venues/search?client_id=L5OSMSDBGVZJOVZV2B4WBCYTKRGTMJNIC1YWWO2COACAHMOM' +\n    '&client_secret=LKGLW5WQEMB1Y40QBYKGL1CYMA0DI1XMUZLRQ1ESOOVH44ER&v=20130815%20&limit=20&near=' + city + '&query=' + query + '';\n\n    return fetch(apiURL)\n    .then(function(response){ \n      return response.json() \n    })\n    .then(function(json){\n      return Promise.resolve(json);\n    });\n  }\n\n  //Filter the list of places based on the input in search bar.\n  updateSearch(query) {\n    query = query.trim();\n    this.state.queriedPlaces = this.state.places;\n\n    //Search only if the input has a character.\n    if (query) {\n      let queriedPlaces= this.state.queriedPlaces.filter(qp => qp.name.toUpperCase().startsWith(query.toUpperCase()));\n      this.setState({queriedPlaces});\n    } else {\n      //If the input is blank spaces or empty, show all the places\n      this.setState({queriedPlaces: this.state.places});\n    }\n  }\n\n  // Called when a marker is clicked or a location is clicked from the list\n  handleMarkerClick = (id) => {\n    var selectedPlace = this.state.places.filter(place => place.id === id);\n    this.setState({selectedPlace: selectedPlace, center: {\"lat\": selectedPlace[0].location.lat, \"lng\": selectedPlace[0].location.lng}});\n  }\n\n  // When there is an error fetching the data, a modal pops up, asking to refresh. This is called to close the modal and refresh the page. \n  closeModal() {\n    this.setState({modalIsOpen: false});\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n  \n        { /* Top bar Navigation & Sidebar for navigation to search the place. */ }\n        <div className=\"header\">\n          <span className=\"title\">Neighborhood Map</span>\n          <SearchComponent\n            placeClick = {this.handleMarkerClick} \n            updateSearch = {(query) => this.updateSearch(query)}\n            queriedPlaces = {this.state.queriedPlaces} />\n        </div>\n  \n        { /* Google Map component */}\n        <MapComponent \n          markers = {this.state.markers}\n          center = {this.state.center}\n          isMarkerVisible = {this.state.isMarkerVisible}\n          onMarkerClick = {this.handleMarkerClick}\n          selectedPlace = {this.state.selectedPlace} />\n    \n        { /* Modal window when there is an error loading data. Uses `react-modal` */}\n        <Modal isOpen={this.state.modalIsOpen} ariaHideApp={false}>\n          <div>Looks like there is some problem with loading the data. Please refresh the page.</div>\n          <button onClick={() => this.closeModal()}>Click here to refresh</button>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}